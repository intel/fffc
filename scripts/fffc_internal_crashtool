#! /usr/bin/env python3

# Copyright (C) 2020 Intel Corporation
# SPDX-License-Identifier: MIT

import argparse
import os
import pathlib
import random
import subprocess
import tempfile


def less(filename):
	cmd = ["less", filename]
	subprocess.run(cmd)


def view_asan_report(report_path):
	report_path = report_path.resolve()
	return less(str(report_path))


def view_log(log_path):
	log_path = log_path.resolve()
	process_cmd = ['fffc_log_inspector', str(log_path)]
	completed_process = subprocess.run(process_cmd, stdout=subprocess.PIPE)
	text = completed_process.stdout
	with tempfile.NamedTemporaryFile() as t:
		t.write(text)
		t.flush()
		return less(t.name)


def find_logs(crash_dir):
	for log_path in crash_dir.glob("crash.*/log"):
		yield log_path


def find_reports(crash_dir):
	for report_path in crash_dir.glob("crash.*/crash.*"):
		yield report_path


def report_path_to_log_path(report_path):
	crash_path = report_path.parent
	return crash_path / "log"


def pick_log(log_path):
	fffc_replay_target = pathlib.Path()
	log_path = log_path.resolve()
	tmp_env_path = os.environ.get("FFFC_TEMP_ENV_PATH", None)
	if tmp_env_path:
		with open(tmp_env_path, 'w') as f:
			f.write(str(log_path))
	else:
		with open("/tmp/fffc_wtf", "w") as f:
			f.write("wtf")

def reset_shell():
	subprocess.run(['stty', 'sane'])


def view_reports(crash_dir, randomize):
	report_paths = find_reports(crash_dir)
	if randomize:
		report_paths = list(report_paths)
		random.shuffle(report_paths)
	for report_path in report_paths:
		try:
			view_asan_report(report_path)
		except KeyboardInterrupt:
			log_path = report_path_to_log_path(report_path)
			pick_log(log_path)
			return


def view_logs(crash_dir, randomize):
	log_paths = find_logs(crash_dir)
	if randomize:
		log_paths = random.shuffle(log_paths)
	for log_path in log_paths:
		try:
			view_log(log_path)
		except KeyboardInterrupt:
			pick_log(log_path)
			return


if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='Explore the crashes generated by FFFC.')
	parser.add_argument('fffc_crash_directories', nargs='+', help='the fffc_crash* directories to explore')
	parser.add_argument('--logs', action='store_true', help='view mutation logs instead of crashes')
	parser.add_argument('--random', action='store_true', help='randomize viewing order')
	args = parser.parse_args()

	if args.logs:
		for crash_dir in args.fffc_crash_directories:
			crash_dir_path = pathlib.Path(crash_dir)
			view_logs(crash_dir_path, args.random)
	else:
		for crash_dir in args.fffc_crash_directories:
			crash_dir_path = pathlib.Path(crash_dir)
			view_reports(crash_dir_path, args.random)

	reset_shell()
